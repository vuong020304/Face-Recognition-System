#!/usr/bin/env python3
"""
Face Recognition System - Main Application
üéØ ·ª®ng d·ª•ng nh·∫≠n d·∫°ng khu√¥n m·∫∑t v·ªõi menu console t∆∞∆°ng t√°c
"""

import os
import sys
import argparse
import cv2
import time
import numpy as np
from pathlib import Path

from face_core.detector import FaceDetector
from face_core.gallery import FaceGalleryManager
from face_core.recognizer import FaceRecognizer
from utils.image_utils import load_image_from_url
from utils.visualization import show_image

# ===== CONSTANTS =====
RECOGNITION_THRESHOLD = 0.6  # Threshold cho nh·∫≠n d·∫°ng
DUPLICATE_THRESHOLD = 0.95   # Threshold cho duplicate detection
MAX_TOP_MATCHES = 3          # S·ªë l∆∞·ª£ng top matches hi·ªÉn th·ªã
SUPPORTED_IMAGE_FORMATS = {'.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.tif', '.webp'}  # ƒê·ªãnh d·∫°ng ·∫£nh h·ªó tr·ª£

def normalize_path(path_input):
    """Chu·∫©n h√≥a ƒë∆∞·ªùng d·∫´n t·ª´ nhi·ªÅu ƒë·ªãnh d·∫°ng kh√°c nhau"""
    if not path_input:
        return None
    
    # X√≥a c√°c d·∫•u ngo·∫∑c k√©p, ƒë∆°n, kho·∫£ng tr·∫Øng th·ª´a
    path = path_input.strip().strip('"').strip("'").strip()
    
    if not path:
        return None
    
    # S·ª≠ d·ª•ng pathlib ƒë·ªÉ chu·∫©n h√≥a
    try:
        path_obj = Path(path)
        
        # N·∫øu l√† ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi, resolve n√≥
        if not path_obj.is_absolute():
            path_obj = Path.cwd() / path_obj
        
        # Resolve ƒë·ªÉ x·ª≠ l√Ω .. v√† .
        path_obj = path_obj.resolve()
        
        return str(path_obj)
    except Exception as e:
        print(f"‚ö†Ô∏è  [PATH] L·ªói chu·∫©n h√≥a ƒë∆∞·ªùng d·∫´n: {e}")
        return path

def is_valid_image_file(file_path):
    """Ki·ªÉm tra xem file c√≥ ph·∫£i l√† ·∫£nh h·ª£p l·ªá kh√¥ng"""
    if not file_path or not os.path.exists(file_path):
        return False
    
    try:
        path_obj = Path(file_path)
        
        # Ki·ªÉm tra extension
        if path_obj.suffix.lower() not in SUPPORTED_IMAGE_FORMATS:
            return False
        
        # Ki·ªÉm tra k√≠ch th∆∞·ªõc file (kh√¥ng qu√° nh·ªè)
        if path_obj.stat().st_size < 100:  # < 100 bytes
            return False
        
        return True
    except Exception:
        return False

def get_file_info(file_path):
    """L·∫•y th√¥ng tin file"""
    try:
        path_obj = Path(file_path)
        size_mb = path_obj.stat().st_size / (1024 * 1024)
        return {
            'name': path_obj.name,
            'size_mb': size_mb,
            'extension': path_obj.suffix.lower()
        }
    except Exception:
        return None

class FaceRecognitionApp:
    """·ª®ng d·ª•ng nh·∫≠n d·∫°ng khu√¥n m·∫∑t ch√≠nh"""
    
    def __init__(self):
        """Kh·ªüi t·∫°o ·ª©ng d·ª•ng"""
        print("üîÑ ƒêang kh·ªüi t·∫°o Face Recognition System...")
        
        # Initialize core components
        self.detector = FaceDetector()
        self.gallery_manager = FaceGalleryManager(self.detector)
        self.recognizer = FaceRecognizer(self.detector, self.gallery_manager, threshold=RECOGNITION_THRESHOLD)
        
        print("‚úÖ H·ªá th·ªëng ƒë√£ s·∫µn s√†ng!")
        self._show_status()
    
    def _show_status(self):
        """Hi·ªÉn th·ªã tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa gallery"""
        counts = self.gallery_manager.get_person_count()
        total_people = len(counts)
        total_images = sum(counts.values()) if counts else 0
        
        print(f"\nüìä Gallery Status: {total_people} ng∆∞·ªùi, {total_images} ·∫£nh")
        if counts:
            print("üë• Danh s√°ch:")
            for name, count in counts.items():
                print(f"   - {name}: {count} ·∫£nh")
    
    def _show_menu(self):
        """Hi·ªÉn th·ªã menu ch√≠nh"""
        print("\n" + "="*50)
        print("üéØ FACE RECOGNITION SYSTEM")
        print("="*50)
        print("1. üì∑ Th√™m ng∆∞·ªùi qua camera")
        print("2. üñºÔ∏è  Th√™m ng∆∞·ªùi t·ª´ ·∫£nh (file/URL)")
        print("3. üé• Nh·∫≠n d·∫°ng realtime (camera)")
        print("4. üîç Nh·∫≠n d·∫°ng t·ª´ ·∫£nh")
        print("5. üë• Xem danh s√°ch gallery")
        print("6. üóëÔ∏è  X√≥a ng∆∞·ªùi kh·ªèi gallery")
        print("7. üîÑ T√¨m v√† x√≥a duplicate")
        print("8. üìä Th·ªëng k√™ gallery")
        print("0. ‚ùå Tho√°t")
        print("="*50)
    
    def _suggest_similar_files(self, target_path):
        """G·ª£i √Ω c√°c file t∆∞∆°ng t·ª± trong th∆∞ m·ª•c"""
        try:
            target_dir = Path(target_path).parent
            target_name = Path(target_path).stem.lower()
            
            if not target_dir.exists():
                return
            
            similar_files = []
            for file_path in target_dir.iterdir():
                if (file_path.is_file() and 
                    file_path.suffix.lower() in SUPPORTED_IMAGE_FORMATS and
                    target_name in file_path.stem.lower()):
                    similar_files.append(str(file_path))
            
            if similar_files:
                print(f"üîç C√°c file t∆∞∆°ng t·ª± trong th∆∞ m·ª•c:")
                for i, file_path in enumerate(similar_files[:5], 1):
                    print(f"   {i}. {Path(file_path).name}")
        except Exception:
            pass
    
    def add_person_via_camera(self):
        """Th√™m ng∆∞·ªùi qua camera"""
        print("\nüì∑ TH√äM NG∆Ø·ªúI QUA CAMERA")
        print("-" * 30)
        
        try:
            from demos.add_person_camera import smart_add_person_camera
            result = smart_add_person_camera()
            
            # Reload gallery sau khi th√™m ng∆∞·ªùi qua camera
            self._reload_gallery()
            
            return result
        except Exception as e:
            print(f"‚ùå [CAMERA] L·ªói khi th√™m ng∆∞·ªùi qua camera: {e}")
            return False
    
    def _reload_gallery(self):
        """Reload gallery t·ª´ file ƒë·ªÉ ƒë·ªìng b·ªô v·ªõi c√°c thay ƒë·ªïi"""
        try:
            old_gallery = dict(self.gallery_manager.gallery)
            self.gallery_manager.gallery = self.gallery_manager._load_gallery()
            
            # Check for changes
            new_counts = self.gallery_manager.get_person_count()
            old_counts = {name: len(embs) for name, embs in old_gallery.items()}
            
            changes_detected = False
            for name, new_count in new_counts.items():
                old_count = old_counts.get(name, 0)
                if new_count != old_count:
                    changes_detected = True
                    print(f"üîÑ [SYNC] {name}: {old_count} ‚Üí {new_count} ·∫£nh")
            
            if changes_detected:
                print("‚úÖ ƒê√£ ƒë·ªìng b·ªô gallery th√†nh c√¥ng!")
        except Exception as e:
            print(f"‚ö†Ô∏è  [SYNC] L·ªói khi reload gallery: {e}")
    
    def add_person_via_image(self):
        """Th√™m ng∆∞·ªùi t·ª´ ·∫£nh (file ho·∫∑c URL)"""
        print("\nüñºÔ∏è  TH√äM NG∆Ø·ªúI T·ª™ ·∫¢NH")
        print("-" * 30)
        
        name = input("Nh·∫≠p t√™n ng∆∞·ªùi: ").strip()
        if not name:
            print("‚ùå T√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
            return
        
        source = input("Nh·∫≠p ƒë∆∞·ªùng d·∫´n ·∫£nh ho·∫∑c URL: ").strip()
        if not source:
            print("‚ùå ƒê∆∞·ªùng d·∫´n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
            return
        
        # Load image
        if source.startswith(("http://", "https://")):
            print("üåê ƒêang t·∫£i ·∫£nh t·ª´ URL...")
            image = load_image_from_url(source)
            if image is None:
                print("‚ùå [NETWORK] Kh√¥ng th·ªÉ t·∫£i ·∫£nh t·ª´ URL")
                return
        else:
            # Chu·∫©n h√≥a ƒë∆∞·ªùng d·∫´n
            normalized_path = normalize_path(source)
            if not normalized_path:
                print("‚ùå [PATH] ƒê∆∞·ªùng d·∫´n kh√¥ng h·ª£p l·ªá!")
                return
            
            print(f"üìÅ ƒê∆∞·ªùng d·∫´n chu·∫©n h√≥a: {normalized_path}")
            
            # Ki·ªÉm tra file t·ªìn t·∫°i
            if not os.path.exists(normalized_path):
                print(f"‚ùå [FILE] File kh√¥ng t·ªìn t·∫°i: {normalized_path}")
                # G·ª£i √Ω c√°c file t∆∞∆°ng t·ª±
                self._suggest_similar_files(normalized_path)
                return
            
            # Ki·ªÉm tra ƒë·ªãnh d·∫°ng ·∫£nh
            if not is_valid_image_file(normalized_path):
                print(f"‚ùå [FORMAT] File kh√¥ng ph·∫£i l√† ·∫£nh h·ª£p l·ªá ho·∫∑c b·ªã l·ªói")
                print(f"üìù C√°c ƒë·ªãnh d·∫°ng h·ªó tr·ª£: {', '.join(SUPPORTED_IMAGE_FORMATS)}")
                return
            
            # Hi·ªÉn th·ªã th√¥ng tin file
            file_info = get_file_info(normalized_path)
            if file_info:
                print(f"üìä File: {file_info['name']} ({file_info['size_mb']:.2f} MB)")
            
            # ƒê·ªçc ·∫£nh
            image = cv2.imread(normalized_path)
            if image is None:
                print("‚ùå [FILE] Kh√¥ng th·ªÉ ƒë·ªçc file ·∫£nh! File c√≥ th·ªÉ b·ªã h·ªèng.")
                return
        
        # Add to gallery
        success, msg = self.gallery_manager.add_person(name, image=image)
        if success:
            print(f"‚úÖ {msg}")
        else:
            print(f"‚ùå {msg}")
    
    def realtime_recognition(self):
        """Nh·∫≠n d·∫°ng realtime qua camera"""
        print("\nüé• NH·∫¨N D·∫†NG REALTIME")
        print("-" * 30)
        
        if not self.gallery_manager.gallery:
            print("‚ö†Ô∏è  Gallery tr·ªëng! H√£y th√™m ng∆∞·ªùi tr∆∞·ªõc.")
            return
        try:
            from demos.webcam_realtime_demo import webcam_realtime_demo
            webcam_realtime_demo()
        except Exception as e:
            print(f"‚ùå [CAMERA] L·ªói khi ch·∫°y nh·∫≠n d·∫°ng realtime: {e}")
            print("üîß H√£y th·ª≠: pip install opencv-contrib-python")
    
    def recognize_from_image(self):
        """Nh·∫≠n d·∫°ng t·ª´ ·∫£nh"""
        print("\nüîç NH·∫¨N D·∫†NG T·ª™ ·∫¢NH")
        print("-" * 30)
        
        if not self.gallery_manager.gallery:
            print("‚ö†Ô∏è  Gallery tr·ªëng! H√£y th√™m ng∆∞·ªùi tr∆∞·ªõc.")
            return
        
        source = input("Nh·∫≠p ƒë∆∞·ªùng d·∫´n ·∫£nh ho·∫∑c URL: ").strip()
        if not source:
            print("‚ùå ƒê∆∞·ªùng d·∫´n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
            return
        
        # Chu·∫©n h√≥a ƒë∆∞·ªùng d·∫´n n·∫øu kh√¥ng ph·∫£i URL
        if not source.startswith(("http://", "https://")):
            normalized_source = normalize_path(source)
            if normalized_source:
                print(f"üìÅ ƒê∆∞·ªùng d·∫´n chu·∫©n h√≥a: {normalized_source}")
                source = normalized_source
        
        try:
            from demos.image_demo import recognize_from_source
            results = recognize_from_source(source, self.detector, self.recognizer)
            
            if results:
                print(f"\n‚úÖ Ho√†n th√†nh nh·∫≠n d·∫°ng {len(results)} khu√¥n m·∫∑t!")
            else:
                print("\n‚ùå Kh√¥ng th·ªÉ nh·∫≠n d·∫°ng ƒë∆∞·ª£c khu√¥n m·∫∑t n√†o!")
                
        except Exception as e:
            print(f"‚ùå [RECOGNITION] L·ªói khi nh·∫≠n d·∫°ng: {e}")
    
    def show_gallery_list(self):
        """Hi·ªÉn th·ªã danh s√°ch ng∆∞·ªùi trong gallery"""
        print("\nüë• DANH S√ÅCH GALLERY")
        print("-" * 30)
        
        counts = self.gallery_manager.get_person_count()
        if not counts:
            print("üì≠ Gallery tr·ªëng!")
            return
        
        total_people = len(counts)
        total_images = sum(counts.values())
        
        print(f"üìä T·ªïng quan: {total_people} ng∆∞·ªùi, {total_images} ·∫£nh\n")
        
        for i, (name, count) in enumerate(counts.items(), 1):
            print(f"{i:2}. {name:20} - {count} ·∫£nh")
    
    def remove_person(self):
        """X√≥a ng∆∞·ªùi kh·ªèi gallery"""
        print("\nüóëÔ∏è  X√ìA NG∆Ø·ªúI KH·ªéI GALLERY")
        print("-" * 30)
        
        counts = self.gallery_manager.get_person_count()
        if not counts:
            print("üì≠ Gallery tr·ªëng!")
            return
        
        # Hi·ªÉn th·ªã danh s√°ch
        print("Danh s√°ch hi·ªán t·∫°i:")
        for i, (name, count) in enumerate(counts.items(), 1):
            print(f"{i}. {name} ({count} ·∫£nh)")
        
        # Nh·∫≠p t√™n c·∫ßn x√≥a
        name_to_remove = input("\nNh·∫≠p t√™n ng∆∞·ªùi c·∫ßn x√≥a: ").strip()
        if not name_to_remove:
            print("‚ùå T√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
            return
        
        if name_to_remove not in counts:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y '{name_to_remove}' trong gallery!")
            return
        
        # X√°c nh·∫≠n
        confirm = input(f"‚ö†Ô∏è  B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a '{name_to_remove}' ({counts[name_to_remove]} ·∫£nh)? (y/N): ")
        if confirm.lower() != 'y':
            print("üö´ ƒê√£ h·ªßy thao t√°c x√≥a")
            return
        
        # Th·ª±c hi·ªán x√≥a
        success, msg = self.gallery_manager.remove_person(name_to_remove)
        if success:
            print(f"‚úÖ {msg}")
        else:
            print(f"‚ùå {msg}")
    
    def find_and_remove_duplicates(self):
        """T√¨m v√† g·ª£i √Ω x√≥a duplicate"""
        print("\nüîÑ T√åM V√Ä X√ìA DUPLICATE")
        print("-" * 30)
        
        if not self.gallery_manager.gallery:
            print("üì≠ Gallery tr·ªëng!")
            return
        
        print("üîç ƒêang t√¨m ki·∫øm duplicate...")
        duplicates = self.gallery_manager.find_duplicates(threshold=DUPLICATE_THRESHOLD)
        
        if not duplicates:
            print("‚úÖ Kh√¥ng t√¨m th·∫•y duplicate n√†o!")
            return
        
        print(f"‚ö†Ô∏è  T√¨m th·∫•y duplicate trong {len(duplicates)} ng∆∞·ªùi:")
        
        for name, dup_list in duplicates.items():
            print(f"\nüë§ {name}:")
            for i, j, similarity in dup_list:
                print(f"   ·∫¢nh {i} v√† {j}: {similarity:.3f}")
        
        # Auto-suggest removal
        print("\nü§ñ G·ª£i √Ω t·ª± ƒë·ªông x√≥a:")
        total_removed = 0
        
        for name, dup_list in duplicates.items():
            print(f"\nüë§ ƒêang x·ª≠ l√Ω {name}...")
            
            # Sort by similarity v√† ch·ªâ gi·ªØ l·∫°i ·∫£nh ƒë·∫ßu ti√™n
            indices_to_remove = []
            for i, j, similarity in dup_list:
                # Lu√¥n x√≥a index cao h∆°n ƒë·ªÉ tr√°nh shift
                indices_to_remove.append(max(i, j))
            
            # Remove duplicates v√† sort ng∆∞·ª£c ƒë·ªÉ x√≥a t·ª´ index cao xu·ªëng th·∫•p
            indices_to_remove = sorted(list(set(indices_to_remove)), reverse=True)
            
            for idx in indices_to_remove:
                confirm = input(f"   X√≥a ·∫£nh th·ª© {idx} c·ªßa {name}? (Y/n): ")
                if confirm.lower() != 'n':
                    success, msg = self.gallery_manager.remove_duplicate(name, idx)
                    if success:
                        print(f"   ‚úÖ {msg}")
                        total_removed += 1
                    else:
                        print(f"   ‚ùå {msg}")
        
        print(f"\nüéâ Ho√†n th√†nh! ƒê√£ x√≥a {total_removed} ·∫£nh duplicate")
    
    def show_statistics(self):
        """Hi·ªÉn th·ªã th·ªëng k√™ gallery"""
        print("\nüìä TH·ªêNG K√ä GALLERY")
        print("-" * 30)
        
        counts = self.gallery_manager.get_person_count()
        if not counts:
            print("üì≠ Gallery tr·ªëng!")
            return
        
        total_people = len(counts)
        total_images = sum(counts.values())
        avg_images = total_images / total_people if total_people > 0 else 0
        
        print(f"üë• T·ªïng s·ªë ng∆∞·ªùi:     {total_people}")
        print(f"üì∏ T·ªïng s·ªë ·∫£nh:       {total_images}")
        print(f"üìä TB ·∫£nh/ng∆∞·ªùi:      {avg_images:.1f}")
        
        # Ng∆∞·ªùi c√≥ nhi·ªÅu ·∫£nh nh·∫•t
        max_person = max(counts.items(), key=lambda x: x[1])
        min_person = min(counts.items(), key=lambda x: x[1])
        
        print(f"üèÜ Nhi·ªÅu ·∫£nh nh·∫•t:    {max_person[0]} ({max_person[1]} ·∫£nh)")
        print(f"ü•â √çt ·∫£nh nh·∫•t:       {min_person[0]} ({min_person[1]} ·∫£nh)")
        
        # Ki·ªÉm tra duplicate
        duplicates = self.gallery_manager.find_duplicates(threshold=DUPLICATE_THRESHOLD)
        dup_count = sum(len(dup_list) for dup_list in duplicates.values())
        print(f"üîÑ Duplicate pairs:   {dup_count}")
    
    def interactive_menu(self):
        """Menu t∆∞∆°ng t√°c ch√≠nh"""
        print("üéâ Ch√†o m·ª´ng ƒë·∫øn v·ªõi Face Recognition System!")
        
        while True:
            try:
                self._show_menu()
                choice = input("\nüëÜ Ch·ªçn ch·ª©c nƒÉng (0-8): ").strip()

                if choice == "1":
                    self.add_person_via_camera()
                elif choice == "2":
                    self.add_person_via_image()
                elif choice == "3":
                    self.realtime_recognition()
                elif choice == "4":
                    self.recognize_from_image()
                elif choice == "5":
                    self.show_gallery_list()
                elif choice == "6":
                    self.remove_person()
                elif choice == "7":
                    self.find_and_remove_duplicates()
                elif choice == "8":
                    self.show_statistics()
                elif choice == "0":
                    print("\nüëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng Face Recognition System!")
                    break
                else:
                    print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Vui l√≤ng ch·ªçn t·ª´ 0-8")

                # Hi·ªÉn th·ªã tr·∫°ng th√°i sau m·ªói thao t√°c
                if choice in ["1", "2", "6", "7"]:
                    # Reload gallery tr∆∞·ªõc khi hi·ªÉn th·ªã status cho c√°c thao t√°c c√≥ th·ªÉ thay ƒë·ªïi gallery
                    if choice in ["1", "6", "7"]:  # Camera, remove, duplicate - c√≥ th·ªÉ s·ª≠ d·ª•ng instance kh√°c
                        self._reload_gallery()
                    self._show_status()

            except KeyboardInterrupt:
                print("\n\nüëã ƒê√£ d·ª´ng ·ª©ng d·ª•ng. C·∫£m ∆°n b·∫°n!")
                break
            except Exception as e:
                print(f"\n‚ùå [ERROR] L·ªói kh√¥ng mong mu·ªën: {e}")
                print("üîÑ Ti·∫øp t·ª•c s·ª≠ d·ª•ng ·ª©ng d·ª•ng...")

def main():
    """Entry point ch√≠nh v·ªõi command line arguments"""
    parser = argparse.ArgumentParser(description='Face Recognition System')
    parser.add_argument('--mode', type=str, default='menu',
                        choices=['menu', 'webcam', 'image'],
                        help='Mode to run: menu (interactive), webcam (realtime), image (demo)')
    parser.add_argument('--input', type=str, default=None,
                        help='Path to input image file (for image mode)')
    
    args = parser.parse_args()
    
    try:
        app = FaceRecognitionApp()

        if args.mode == 'menu':
            app.interactive_menu()
        elif args.mode == 'webcam':
            app.realtime_recognition()
        elif args.mode == 'image':
            if args.input:
                # Quick image recognition v·ªõi path normalization
                normalized_input = normalize_path(args.input)
                if not normalized_input or not os.path.exists(normalized_input):
                    print(f"‚ùå [FILE] File kh√¥ng t·ªìn t·∫°i: {args.input}")
                    if normalized_input != args.input:
                        print(f"üìÅ ƒê√£ th·ª≠ chu·∫©n h√≥a th√†nh: {normalized_input}")
                    return

                from demos.image_demo import recognize_from_source
                recognize_from_source(normalized_input, app.detector, app.recognizer)
            else:
                app.recognize_from_image()
        else:
            print(f"‚ùå [MODE] Unknown mode: {args.mode}")

    except Exception as e:
        print(f"‚ùå [STARTUP] L·ªói kh·ªüi t·∫°o ·ª©ng d·ª•ng: {e}")
        print("üîß H√£y ki·ªÉm tra:")
        print("- Dependencies ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë·∫ßy ƒë·ªß")
        print("- Camera c√≥ th·ªÉ truy c·∫≠p ƒë∆∞·ª£c")
        print("- Th∆∞ m·ª•c face_core/ v√† utils/ t·ªìn t·∫°i")

if __name__ == "__main__":
    main()